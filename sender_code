#include <ESP8266WiFi.h>
#include <espnow.h>
#include <Wire.h>
#include <ESP8266WebServer.h>

// Pin definitions
const int trigPin = 12;
const int echoPin = 14;
const int Led_green =  15;  
const int Led_red =  13;

// Speed of sound in air (in cm/microsecond)
#define SOUND_VELOCITY 0.034
#define CM_TO_INCH 0.393701

int Led_green_ON, Led_red_ON, LED_status;
long duration;
float distanceCm;
float distanceInch;

// MAC address for the receiver node
uint8_t broadcastAddress[] = {0xF4, 0xCF, 0xA2, 0xEF, 0x58, 0xCC};
// Set your Board ID (for identification)
#define BOARD_ID 3

// Create an instance of ESP8266WebServer
ESP8266WebServer server(80);  

// Structure for sending data over ESP-NOW
typedef struct struct_message {
    int id;
    int x3;
} struct_message;

struct_message myData;

unsigned long lastTime = 0;
unsigned long timerDelay = 1000;

// Callback function when data is sent via ESP-NOW
void OnDataSent(uint8_t *mac_addr, uint8_t sendStatus) {
  Serial.print("\r\nLast Packet Send Status: ");
  if (sendStatus == 0){
    Serial.println("Delivery success");
  }
  else{
    Serial.println("Delivery fail");
  }
}

// Handle function for root path ("/") connection
void handle_OnConnect() {
  server.send(200, "text/html", SendHTML(Led_green_ON, Led_red_ON));
}

// Handle function for handling not found paths
void handle_NotFound(){
  server.send(404, "text/plain", "Not found");
}

void setup() {
  Serial.begin(115200);

  // Set pin modes
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(Led_green, OUTPUT);
  pinMode(Led_red, OUTPUT);

  // Set ESP8266 in STA (Station) mode and disconnect from any previous connections
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(2000);

  // Print IP details for debugging
  if (WiFi.status() == WL_CONNECTED)
    Serial.println("WiFi connected");
  Serial.print("Local IP: ");
  Serial.println(WiFi.localIP());

  // Set up an Access Point (AP) mode for easy connection
  WiFi.softAP("Sender", "");
  delay(1000);
  Serial.print("SoftAP IP: ");
  Serial.println(WiFi.softAPIP());

  // Set up HTTP server routes and begin server
  server.on("/", handle_OnConnect);
  server.onNotFound(handle_NotFound);
  server.begin();
  Serial.println("HTTP server started");

  // Initialize ESP-NOW
  if (esp_now_init() != 0) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  // Set ESP-NOW role
  esp_now_set_self_role(ESP_NOW_ROLE_CONTROLLER);

  // Register send callback
  esp_now_register_send_cb(OnDataSent);

  // Add a peer for communication
  esp_now_add_peer(broadcastAddress, ESP_NOW_ROLE_SLAVE, 1, NULL, 0);
}

void loop() {
  // Ultrasonic distance measurement
  digitalWrite(trigPin, LOW);
  delayMicroseconds(20);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(100);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distanceCm = duration * SOUND_VELOCITY / 2;
  distanceInch = distanceCm * CM_TO_INCH;
  Serial.print("Distance (cm): ");
  Serial.println(distanceCm);

  // LED control based on distance
  if (distanceCm <= 100) {
    digitalWrite(Led_red, HIGH);
    digitalWrite(Led_green, LOW);
    LED_status = 1;
  } else {
    digitalWrite(Led_red, LOW);
    digitalWrite(Led_green, HIGH);
    LED_status = 0;
  }

  // Send data via ESP-NOW periodically
  if ((millis() - lastTime) > timerDelay) {
    myData.x3 = LED_status;

    // Send message via ESP-NOW
    esp_now_send(0, (uint8_t *) &myData, sizeof(myData));
    lastTime = millis();
    server.handleClient(); // Handle HTTP server requests
  }
}

// Generate HTML response for the web page
String SendHTML(int Led_green_ON, int Led_red_ON) {
  String ptr = "<!DOCTYPE html> <html>\n";
  ptr += "<head> <meta http-equiv='refresh' content='5' >"; 
  ptr += "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n";
  ptr += "<title>Easy Parking</title>\n";
  // ... rest of your HTML styling ...
  ptr += "</style>\n";
  ptr += "</head>\n";
  ptr += "<body>\n";
  // ... rest of your HTML content ...
  ptr += "</body>\n";
  ptr += "</html>\n";
  return ptr;
}
